local __util = require 'larian.util'

function HasProficiencyInAcrobatics()
	return HasProficiencyBonus(Ability.Dexterity,Skill.Acrobatics,context.Source)
end

function HasProficiencyInAnimalHandling()
	return HasProficiencyBonus(Ability.Wisdom,Skill.AnimalHandling,context.Source)
end

function HasProficiencyInAthletics()
	return HasProficiencyBonus(Ability.Strength,Skill.Athletics,context.Source)
end

function HasProficiencyInArcana()
	return HasProficiencyBonus(Ability.Intelligence,Skill.Arcana,context.Source)
end

function HasProficiencyInDeception()
	return HasProficiencyBonus(Ability.Charisma,Skill.Deception,context.Source)
end

function HasProficiencyInHistory()
	return HasProficiencyBonus(Ability.Intelligence,Skill.History,context.Source)
end

function HasProficiencyInInsight()
	return HasProficiencyBonus(Ability.Wisdom,Skill.Insight,context.Source)
end

function HasProficiencyInIntimidation()
	return HasProficiencyBonus(Ability.Charisma,Skill.Intimidation,context.Source)
end

function HasProficiencyInInvestigation()
	return HasProficiencyBonus(Ability.Intelligence,Skill.Investigation,context.Source)
end

function HasProficiencyInMedicine()
	return HasProficiencyBonus(Ability.Wisdom,Skill.Medicine,context.Source)
end

function HasProficiencyInNature()
	return HasProficiencyBonus(Ability.Intelligence,Skill.Nature,context.Source)
end

function HasProficiencyInPerception()
	return HasProficiencyBonus(Ability.Wisdom,Skill.Perception,context.Source)
end

function HasProficiencyInPerformance()
	return HasProficiencyBonus(Ability.Charisma,Skill.Performance,context.Source)
end

function HasProficiencyInPersuasion()
	return HasProficiencyBonus(Ability.Charisma,Skill.Persuasion,context.Source)
end

function HasProficiencyInReligion()
	return HasProficiencyBonus(Ability.Intelligence,Skill.Religion,context.Source)
end

function HasProficiencyInSleightOfHand()
	return HasProficiencyBonus(Ability.Dexterity,Skill.SleightOfHand,context.Source)
end

function HasProficiencyInStealth()
	return HasProficiencyBonus(Ability.Dexterity,Skill.Stealth,context.Source)
end

function HasProficiencyInSurvival()
	return HasProficiencyBonus(Ability.Wisdom,Skill.Survival,context.Source)
end

function HasMediumArmor(entity)
    entity = entity or context.Target
    local armor = GetActiveArmor(entity)
    local hasMediumArmor = armor.ArmorType == ArmorType.Hide or armor.ArmorType == ArmorType.ChainShirt or armor.ArmorType == ArmorType.ScaleMail or armor.ArmorType == ArmorType.BreastPlate or armor.ArmorType == ArmorType.HalfPlate
    return ConditionResult(hasMediumArmor)
end

function NoMediumOrHeavyArmorOrShield(entity)
    entity = entity or context.Target
    result = Character(entity) & ~HasHeavyArmor(entity) & ~HasMediumArmor(entity) & ~HasShieldEquipped(entity)
    return ConditionResult(result.Result, {ConditionError("Bladesong_IncompatibleArmor")})
end

function EXP_HasAnyExtraAttackBladesinging(entity)
    local entity = entity or context.Target
	local result = HasAnyStatus({'EXTRA_ATTACK','EXTRA_ATTACK_2','EXTRA_ATTACK_WAR_MAGIC','EXTRA_ATTACK_WAR_PRIEST','MAG_MARTIAL_EXERTION','WILDSTRIKE_EXTRA_ATTACK','WILDSTRIKE_2_EXTRA_ATTACK','STALKERS_FLURRY','EXTRA_ATTACK_THIRSTING_BLADE','COMMANDERS_STRIKE_D10','COMMANDERS_STRIKE_D8','EXTRA_ATTACK_BLADESINGING','EXTRA_ATTACK_CANTRIP'},{},{}, entity, context.Source, false).Result
    return ConditionResult(result)
end

function HasCleansingTouchStatus()
	return HasAnyStatus({'CHILL_TOUCH','FRIENDS','RAY_OF_FROST','SHOCKING_GRASP','VICIOUSMOCKERY','ARMS_OF_HADAR','COLOR_SPRAY','COMMAND_APPROACH','COMMAND_HALT','COMMAND_FLEE','COMMAND_GROVEL','COMPELLED_DUEL','ENSNARING_STRIKE','FAERIE_FIRE','HEX_STRENGTH','HEX_DEXTERITY','HEX_CONSTITUTION','HEX_INTELLIGENCE','HEX_WISDOM','HEX_CHARISMA','HUNTERS_MARK','SEARING_SMITE','SLEEP','HIDEOUS_LAUGHTER','WITCH_BOLT','BLINDNESS','BRANDING_SMITE','CROWN_OF_MADNESS','ENTHRALL','HEAT_METAL','HOLD_PERSON','ACID_ARROW','ACID_ARROW_3','ACID_ARROW_4','ACID_ARROW_5','ACID_ARROW_6','ACID_ARROW_7','ACID_ARROW_8','ACID_ARROW_9','PHANTASMAL_FORCE','RAY_OF_ENFEEBLEMENT','CURSE_ABILITY_CHARISMA','CURSE_ABILITY_CONSTITUTION','CURSE_ABILITY_DEXTERITY','CURSE_ABILITY_INTELLIGENCE','CURSE_ABILITY_STRENGTH','CURSE_ABILITY_WISDOM','CURSE_ATTACK','CURSE_EXTRA_DAMAGE','CURSE_SKIP_TURN','FEAR','HYPNOTIC_PATTERN','SLOW','BANISHED','CONFUSION','DOMINATE_BEAST','PHANTASMAL_KILLER','POLYMORPH_SHEEP','BANISHING_SMITE','CONTAGION_SLIMY_DOOM','CONTAGION_SLIMY_DOOM_1','CONTAGION_SLIMY_DOOM_2','CONTAGION_SLIMY_DOOM_3','CONTAGION_FILTH_FEVER','CONTAGION_FILTH_FEVER_1','CONTAGION_FILTH_FEVER_2','CONTAGION_FILTH_FEVER_3','CONTAGION_BLINDING_SICKNESS','CONTAGION_BLINDING_SICKNESS_1','CONTAGION_BLINDING_SICKNESS_2','CONTAGION_BLINDING_SICKNESS_3','CONTAGION_FLESH_ROT','CONTAGION_FLESH_ROT_1','CONTAGION_FLESH_ROT_2','CONTAGION_FLESH_ROT_3','CONTAGION_MINDFIRE','CONTAGION_MINDFIRE_1','CONTAGION_MINDFIRE_2','CONTAGION_MINDFIRE_3','CONTAGION_SEIZURE','CONTAGION_SEIZURE_1','CONTAGION_SEIZURE_2','CONTAGION_SEIZURE_3','HOLD_MONSTER','SLEEPING_EYEBITE','EYEBITE_PANICKED','EYEBITE_SICKENED','FLESH_TO_STONE','FLESH_TO_STONE_1','FLESH_TO_STONE_2','FLESH_TO_STONE_3','HARM','IRRESISTIBLE_DANCE','SUNBEAM','LOW_DEVILSFEE_WEALTH','STAGGERING_SMITE','WYR_GORTASH_CHAINSOFTYRANNY','CHARMED','DISARM','FRIGHTENED','POISONED','OFF_BALANCED','CAUSE_FEAR','CAUSTIC_BREW','CAUSTIC_BREW_2','CAUSTIC_BREW_3','CAUSTIC_BREW_4','CAUSTIC_BREW_5','CAUSTIC_BREW_6','CAUSTIC_BREW_7','CAUSTIC_BREW_8','CAUSTIC_BREW_9','SNARE_RESTRAINED','MAXIMILIANS_EARTHEN_GRASP','MIND_SPIKE','SUGGESTION','MIND_WHIP','MIND_WHIP_MOVEMENT','MIND_WHIP_MOVEMENT_BLOCK','ENEMIES_ABOUND','RAULOTHIMS_PSYCHIC_LANCE','BLINDING_SMITE_BLINDED','BLINDED'},{},{}, context.Target)
end

function EXP_ShareSpells()
    return SpellId('Target_CureWounds') | SpellId('Target_CureWounds_2') | SpellId('Target_CureWounds_3') | SpellId('Target_CureWounds_4') | SpellId('Target_CureWounds_5') | SpellId('Shout_DetectMagic') | SpellId('Shout_DetectMagic_2') | SpellId('Shout_DetectMagic_3') | SpellId('Shout_DetectMagic_4') | SpellId('Shout_DetectMagic_5') | SpellId('Target_Jump') | SpellId('Target_Jump_2') | SpellId('Target_Jump_3') | SpellId('Target_Jump_4') | SpellId('Target_Jump_5') | SpellId('Target_Longstrider') | SpellId('Target_Longstrider_2') | SpellId('Target_Longstrider_3') | SpellId('Target_Longstrider_4') | SpellId('Target_Longstrider_5') | SpellId('Shout_ZephyrStrike') | SpellId('Shout_ZephyrStrike_2') | SpellId('Shout_ZephyrStrike_3') | SpellId('Shout_ZephyrStrike_4') | SpellId('Shout_ZephyrStrike_5') | SpellId('Target_Barkskin') | SpellId('Target_Barkskin_3') | SpellId('Target_Barkskin_4') | SpellId('Target_Barkskin_5') | SpellId('Target_Darkvision') | SpellId('Target_Darkvision_3') | SpellId('Target_Darkvision_4') | SpellId('Target_Darkvision_5') | SpellId('Target_EnhanceAbility_BearsEndurance') | SpellId('Target_EnhanceAbility_BullsStrength') | SpellId('Target_EnhanceAbility_CatsGrace') | SpellId('Target_EnhanceAbility_EaglesSplendor') | SpellId('Target_EnhanceAbility_FoxsCunning') | SpellId('Target_EnhanceAbility_OwlsWisdom') | SpellId('Target_LesserRestoration') | SpellId('Target_LesserRestoration_3') | SpellId('Target_LesserRestoration_4') | SpellId('Target_LesserRestoration_5') | SpellId('Shout_PassWithoutTrace') | SpellId('Shout_PassWithoutTrace_3') | SpellId('Shout_PassWithoutTrace_4') | SpellId('Shout_PassWithoutTrace_5') | SpellId('Target_ProtectionFromPoison') | SpellId('Target_ProtectionFromPoison_3') | SpellId('Target_ProtectionFromPoison_4') | SpellId('Target_ProtectionFromPoison_5') | SpellId('Shout_AshardalonsStride') | SpellId('Shout_AshardalonsStride_4') | SpellId('Shout_AshardalonsStride_5') | SpellId('Target_Nondetection') | SpellId('Target_Nondetection_4') | SpellId('Target_Nondetection_5') | SpellId('Target_ProtectionFromEnergy') | SpellId('Target_ProtectionFromEnergy_4') | SpellId('Target_ProtectionFromEnergy_5') | SpellId('Target_FreedomOfMovement') | SpellId('Target_FreedomOfMovement_4') | SpellId('Target_FreedomOfMovement_5') | SpellId('Shout_GuardianOfNature_PrimalBeast') | SpellId('Shout_GuardianOfNature_PrimalBeast_5') | SpellId('Shout_GuardianOfNature_GreatTree') | SpellId('Shout_GuardianOfNature_GreatTree_5') | SpellId('Target_Stoneskin') | SpellId('Target_Stoneskin_5') | SpellId('Target_GreaterRestoration')
end

function EXP_HasHigherPriorityExtraAttackQueuedBladesinging(status, entity)
    local entity = entity or context.Target
    local eaQueuedStatuses = {'EXTRA_ATTACK_2_Q'
        , 'EXTRA_ATTACK_BLADESINGING_Q'
        , 'EXTRA_ATTACK_CANTRIP_Q'
        , 'EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_WAR_MAGIC_Q'
        , 'MAG_MARTIAL_EXERTION_Q'
        , 'WILDSTRIKE_EXTRA_ATTACK_Q'
        , 'STALKERS_FLURRY_Q'
        , 'EXTRA_ATTACK_THIRSTING_BLADE_Q'
        , 'COMMANDERS_STRIKE_Q_D10'
        , 'COMMANDERS_STRIKE_Q_D8'
        , 'WILDSTRIKE_2_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_WAR_PRIEST_Q'
    }
    for i,v in ipairs(eaQueuedStatuses) do
        if (v == status) then
            return ConditionResult(false)
        end
        if HasStatus(v, entity, context.Source, false).Result then
            return ConditionResult(true)
        end
    end
    return ConditionResult(false)
end

function EXP_HasHigherPriorityExtraAttackQueuedBladesingingCantrip(status, entity)
    local entity = entity or context.Target
    local eaQueuedStatuses = {'EXTRA_ATTACK_2_Q'
        , 'EXTRA_ATTACK_CANTRIP_Q'
        , 'EXTRA_ATTACK_BLADESINGING_Q'
        , 'EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_WAR_MAGIC_Q'
        , 'MAG_MARTIAL_EXERTION_Q'
        , 'WILDSTRIKE_EXTRA_ATTACK_Q'
        , 'STALKERS_FLURRY_Q'
        , 'EXTRA_ATTACK_THIRSTING_BLADE_Q'
        , 'COMMANDERS_STRIKE_Q_D10'
        , 'COMMANDERS_STRIKE_Q_D8'
        , 'WILDSTRIKE_2_EXTRA_ATTACK_Q'
        , 'EXTRA_ATTACK_WAR_PRIEST_Q'
    }
    for i,v in ipairs(eaQueuedStatuses) do
        if (v == status) then
            return ConditionResult(false)
        end
        if HasStatus(v, entity, context.Source, false).Result then
            return ConditionResult(true)
        end
    end
    return ConditionResult(false)
end

function EXP_IsMagical()
    return HasDamageEffectFlag(DamageFlags.Magical)
end

function HasActionSurgeResource(entity)
    entity = entity or context.Source
    result = HasActionResource('ActionSurgeCharge', 1, 0, false, false, entity)
    return ConditionResult(result.Result, {ConditionError("NotHasActionSurgeResource")})
end